Types of blocks
===============
A block is a set of statements which is enclosed in a curly braces i.e {}.

syntax:
-------

	{
		-
		- //set of statements 
		-
	}

In java, we have three types of blocks.

1) Instance block 

2) Static block 

3) Local block

1) Instance block 
------------------
Instance block is used to initialize the instance variables.

Instance block must and should declare immediately after the class but not inside methods and constructors.

Instance block will execute at the time object creation.

We can declare instance block as follow.

syntax:
-------
	//instance block 
	{
		-
		- //set of statements 
		-
	}

ex:1
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}
o/p:
	main-method

ex:2
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
		Test t=new Test();
	}
}
o/p:
	main-method
	instance-block

ex:3
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");	
		Test t2=new Test();
	}
}
o/p:
	instance-block
	main-method
	instance-block

ex:4
-----
class Test  
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}


	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i); // 100
	}
}


2) static block
================
A static block is used to intialize the static vairables.

A static block must and should declare immediately after the class using static keyword but 
not inside methods and constructors.

A static block will execute at the time of classloading.

We can static block as follow.

syntax:
------
	// static block
	static
	{
		-
		- //set of statements 
		-
	} 
	
ex:1
-----
class Test  
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	static-block
	main-method

ex:2
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println("main-method");
	}
}
o/p:
	static-block
	instance-block
	main-method

ex:3
-----
class Test  
{
	//static variable
	static int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{
		System.out.println(i); //200
	}
}

3) Local block
---------------
A local block is used to initialize the local variables.

A local block must and should declare inside methods and constructors.

A local block will execute just like a normal statement.

We can declare local block as follow.

syntax:
	//local block
	{
		-
		- //set of statements 
		-
	}

ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");

		//local block
		{
			System.out.println("stmt2");
		}

		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3


ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		//local variable 
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i); //300
	}
}


Q)Can we execute Java program without main method?

Yes, Till 1.6 version  it is possible to execute java program without main method by using static block.But from 1.7 version onwards it is not possible to execute java program without main method.

ex:

class Test  
{
	static
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}

Operators
==========
Operator is a symbol which is used to perform some operations on operands.
ex:
	c = a + b ;

	Here = and + are operators.
	Here a,b and c are operands.

It can be arithmetic operation,logical operation,bitwise operation,conditional operation and etc.

We have following list of operators in java.

1) Assignment operators 

2) Conditional / Ternary operators 

3) Logical operators 

4) Bitwise operators 

5) Arithmetic operators

6) Relational operators 

7) Shift operators 

8) Unary operators  

1) Assignment operators
------------------------

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i=10;

		i=20;

		i=30;

		System.out.println(i);  //30
	}
}

Note:
------
	Reinitialization is possible in java.


ex:
----
class Test  
{
	public static void main(String[] args)
	{
		final int i=10;

		i=20;

		i=30;

		System.out.println(i);  // C.T.E 
	}
}
Note:
	we can't modify final variable


ex:
---
class Test  
{
	//global variable
	static int i=10;

	public static void main(String[] args)
	{
		//local variable 
		int i=20;

		System.out.println(i); //20
	}
}

Note:
	Here priority goes to local variable .


ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=1,2,3,4,5;

		System.out.println(i);// C.T.E 
	}
}
Note:
	C.T.E : Illegal start of expression 


ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i+=2;  // i = i + 2 ; 

		System.out.println(i);// 12
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i*=4;

		System.out.println(i);// 40
	}
}

ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i/=5;

		System.out.println(i);// 2
	}
}


ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i%=5;

		System.out.println(i);// 0
	}
}


ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i/=20;

		System.out.println(i);// 0
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i%=20;

		System.out.println(i);// 10
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i-=20;

		System.out.println(i);// -10
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=j=1;

		System.out.println(i+" "+j);// C.T.E 
	}
}



























































e



















































































































































































































































