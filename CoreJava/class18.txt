2) Conditional operator / Ternary operator (?:)
===============================================
syntax:
------
	(condition)?value1:value2;

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=(5>2)?true:false;

		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String s=(5>20)?"Hi":"Bye";

		System.out.println(s); //Bye 
	}
}

Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 20

		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 40

		int max=(a>b)?a:b;

		System.out.println("Greatest of two numbers is ="+max);
	}
}

Q) Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 5

		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 1

		System.out.println("Enter the third number :");
		int c=sc.nextInt(); // 9

		//logic
		int max=(a>b)?((a>c)?a:c):((b>c)?b:c);

		System.out.println("Greatest of three numbers is ="+max);
	}
}

3) Logical operators
=====================

Logical AND operator (&&)
-------------------------
Logical AND operator deals with binary numbers either true or false.

Truth table
----------
T	T	= T
T	F	= F
F	T	= F
F	F	= F 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		boolean b1=true && true;
		System.out.println(b1); //true 

		boolean b2=false && true;
		System.out.println(b2); //false 

		boolean b3=true && false;
		System.out.println(b3); //false 

		boolean b4=false && false;
		System.out.println(b4);//false
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		boolean b=(5>2) && (6<10);

		System.out.println(b); // true 
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i=((5>2) && (6<1))?1:0;

		System.out.println(i); // 0
	}
}

Logical OR operator (||)
------------------------
Logical OR operator deals with boolean values either true or false.

Truth table
----------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		boolean b1=true || true;
		System.out.println(b1); //true

		boolean b2=true || false;
		System.out.println(b2); //true

		boolean b3=false || true;
		System.out.println(b3); //true

		boolean b4=false || false;
		System.out.println(b4); //false
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) || (6<1);

		System.out.println(b); // true 
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i=((6<3) || (5>20))?1:0;

		System.out.println(i); // 0
	}
}

Logical Not operator (!)
------------------------


class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>2);

		System.out.println(b); // false
	}
}


ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>20);

		System.out.println(b); // true
	}
}

4) Bitwise Operators
====================

How to convert decimal to binary number
----------------------------------------
Decimal Number : 10

Binary Number :  1010

	2|10
         --- 0
	2|5
         --- 1
        2|2		^
         --- 0		|
	  1		|
	-----------------
	1 0 1 0 


How to convert binary to decimal number
------------------------------
Binary number : 1010

Decimal number : 10

	1 0 1 0 
		<----

	0*1 + 1*2  + 0*4  + 1*8
	
	0 + 2 + 0 + 8 = 10

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table
----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a & b;

		System.out.println(c); //10
	}
}

/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010
	
*/

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a & b;

		System.out.println(c); // 0
	}
}

/*
	10 - 1010
	5  - 0101
	----------
	&  - 0000
	
*/


Bitwise OR operator (|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table
----------
T	T	= T
T	F	= T 
F	T	= T 
F	F	= F

ex:
---
 
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a | b;

		System.out.println(c); // 15
	}
}

/*
	10 - 1010
	5  - 0101
	----------
	|  - 1111
	
	
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
-----------
T	T	= F
T	F	= T
F	T	= T
F	F	= F 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a ^ b;

		System.out.println(c); // 5
	}
}

/*
	10 - 1010
	15 - 1111
	---------
	^  - 0101	<----

	1*1 +  0*2  + 1*4  + 0*8 

	1 + 0 + 4 + 0 = 5
	
*/


Bitwise Not Operator (~)
------------------------


class Test  
{
	public static void main(String[] args) 
	{
		int i=~10;

		System.out.println(i); //  -11 
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i=~22;

		System.out.println(i); //  -23
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i= ~(-56);

		System.out.println(i); //  55
	}
}

5) Arithmetic operators
======================
% - modules
/ - division 
* - multiplication
+ - addition 
- - subtraction 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i = 5+7/10+6%2+6/2+4*3+10%20+8-20;
		
		System.out.println(i); // 18
	}
}
/*
	5  +  7/10  +  6%2  +  6/2  +  4*3  + 10%20  +  8  - 20

	5  +  0   +  0  +  3 + 12 +  10 + 8 - 20

	38 - 20

	18
*/

6) Shift operators 
===================

Right Shift operator (>>)
--------------------------
10 >> 1 = 10/2 

10 >> 2 = 10/4

10 >> 3 = 10/8

10 >> 4 = 10/16

and etc.

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 >> 3;  //10 / 8 

		System.out.println(i); //1 
	}
}



ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i =  100 >> 5;

		System.out.println(i); // 100 / 32 = 3
	}
}


Left Shift operator (<<)
--------------------------
10 >> 1 = 10*2 

10 >> 2 = 10*4

10 >> 3 = 10*8

10 >> 4 = 10*16

and etc.

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 << 3;

		System.out.println(i); // 10 * 8 = 80
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i = 100 << 6;

		System.out.println(i); //  100 * 64 = 6400
	}
}

7) Relational operators
========================

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); // false 

		System.out.println(10 >= 10); // true 

		System.out.println(10 < 20); // true 

		System.out.println(10 <= 20); // true 
	}
}

ex:
----

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true 

		System.out.println(10 == 20); // false

		System.out.println(10 != 10); // false

		System.out.println(10 != 20); // true 
	}
}


Assignment
==========
Q) Write a java program to find out swapping of two numbers using bitwise operator?




















































































































































































