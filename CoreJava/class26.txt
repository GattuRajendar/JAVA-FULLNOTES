Arrays
======
Array is a collection of homogeneous data elements.

The main advantage of arrays are 

1) We can represent multiple elements using single variable name.
   ex:
	int[]  arr={10,20,30};

2) Performance point of view arrays are recommanded to use.

The main disadvantage of arrays are,

1) It is fixed in size.Once if we create an array there is no chance of increasing or 
   decreasing the size of an array.

2) To use array concept in advanced we should know what is the size of an array which 
   is always not possible.

In java, arrays are classified into three types.

1) Single Dimensional Array 

2) Double Dimensional Array 

3) Multi Dimensional Array 

Array Declaration
=================
At the time of array declaration we should not specify array size.
ex:
				Array
				  |
	|-------------------------|------------------------------|
Single Dimensional Array	Double Dimensional Array	Multi Dimensional Array

int[]  arr;			int[][] arr;			int[][][] arr;
int  []arr;			int  [][]arr;			int [][][]arr;
int  arr[];			int  arr[][];			int  arr[][][];
				int[]  []arr;			int[][] []arr;
				int[]  arr[];			int[][] arr[];
				int   []arr[];			int[]  []arr[];
								int[] [][]arr;
								int[]  arr[][];
								int  [][]arr[];
								int  []arr[][];

Array Creation
==============
In java, every array consider as an object.Hence we will use new operator to create an array.

Diagram: class26.1

Rules to construct an array
---------------------------
Rule1:
------
	At the time of array creation compulsary we need to specify array size.
	ex:
		int[] arr=new int[3];

		int[] arr=new int[]; // C.T.E  Array Dimension Missing 


Rule2:
------
	It is legal to have an array size with zero.
	ex:
		int[] arr=new int[0];
		System.out.println(arr.length);//0
	
Rule3:
-----
	We can't take negative numbers as an array size otherwise we will get 
	NegativeArraySizeException.
	ex:
		int[] arr=new int[-3]; // R.E NegativeArraySizeException 

Rule4:
------
	The allowed datatype for an array size are byte,short,int and char.
	If we take other datatypes then we will get compile time error.
	ex:
		int[] arr=new int['a'];

		byte b=10;
		int[] arr=new int[b];

		int[] arr=new int[10L];

Rule5:
------
	The maximum length we can take for an array size is maximum length of integer.
	ex:
		int[] arr=new int[2147483647];


Array Initialization
====================
Once if we create an array. Every arary index initialized with default values.

If we are not happy with default values then we can change with customized values.

Diagram: class26.2


Array Declaration, Creation and Initialization using single line
===============================================================

	int[] arr;
	arr=new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;		===>	int[] arr={10,20,30}; 

				===>	char[] carr={'a','b','c'};

				===>	String[] sarr={"hi","hello","bye"};  


Q) What is the difference between length and length() ? 

length
------
It is a final variable which is applicable for arrays.

It will return size of an array.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		int[] arr=new int[4];
		System.out.println(arr.length);

	}
}

length()
--------
It is a predefined method which is applicable for String objects.

It will return number of characters present in String.

ex:
class  Test 
{
	public static void main(String[] args) 
	{
		String str="bhaskar";

		System.out.println(str.length());//7

	}
}

1) Single Dimensional Array Program
====================================

Q) Write a java program to accept array elements and display them?

approach:1
----------
import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the array size :");
		int size=sc.nextInt(); //4

		int[] arr=new int[size];

		//inserting elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("Enter the element of arr["+i+"] :");
			arr[i]=sc.nextInt();
		}

		//display elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}

approach2
----------
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={10,20,30,40};

		//display elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}

for each loop
=============
A for each loop is used to iterate the elements from Array.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={10,20,30,40};

		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}


Q) Write a java program to display array elements in reverse order?

input:
	6 2 9 1 4 

output:
	4 1 9 2 6 

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={6,2,9,1,4};

		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}

	}
}

Q) Write a java program to perform sum of array elements?

input:
	6 2 9 1 4 

output:
	22

ex:
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={6,2,9,1,4};

		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println(sum);
	}
}


Q) Write a java program to display even elements from given array?

input:
	6 2 9 1 4 

output:
	6 2 4 

ex:

class Test 
{
	public static void main(String[] args)
	{
		int[] arr={6,2,9,1,4};

		for(int i:arr)
		{
			if(i%2==0)
			{
				System.out.print(i+" ");
			}
		}
	}
}

Q) Write a java program to find out number of even and odd elements in a given array?

input:
	6 2 9 1 4 

output:
	No of Even Elements : 3
	No of Odd Elements  : 2 

ex:
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={6,2,9,1,4};

		int even=0,odd=0;

		for(int i:arr)
		{
			if(i%2==0)
				even++;
			else
				odd++;
		}
		System.out.println("No of even elements is :"+even);
		System.out.println("No of odd elements is : "+odd);
	}
}

Q) Write a java program to display prime elements from given array?

input:
	11  2  5  9  13  15  8

output:
	11  2  5  13

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={11,2,5,9,13,15,8};

		for(int n:arr)
		{
			boolean flag=true;
			for(int i=2;i<=n/2;i++)
			{
				if(n%i==0)
				{
					flag=false;
					break;
				}
			}
			if(flag==true)
				System.out.print(n+" ");
		}
	}
}








	

































  























































































