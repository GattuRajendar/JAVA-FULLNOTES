ii) Parameterized constructor
==============================
Suppose if we pass atleat one argument to userdefined constructor then that constructor is called parameterized constructor.

ex:
---
class Employee 
{
	//current class variables 
	private int empId;
	private String empName;
	private double empSal;

	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public void getEmployeeDetails()
	{
		System.out.println("Employee Id :"+empId);
		System.out.println("Employee Name :"+empName);
		System.out.println("Employee Salary :"+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan",10000d);
		e.getEmployeeDetails();
	}
}


2) Default constructor
----------------------
It is a compiler generated constructor for every java program where we will not defined atleast zero-argument constructor.

To see the default constructor we will use below command.
ex:

	cmd> javap  -c   Test 


Diagram: class34.1



Q) What is constructor overloading?

Having same constructor name with different parameters in a single class is called constructor overloading.

ex:
---
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}


this keyword 
============
A "this" keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables

2) To refer current class methods 

3) To refer current class constructors 


1) To refer current class variables
------------------------------------
class A 
{
	int i=10;
	int j=20;
	A(int i,int j)
	{
		System.out.println(this.i+" "+this.j); //10  20
		System.out.println(i+" "+j); // 100  200

	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(100,200);	
	}
}

2) To refer current class methods
---------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
	}
}

3) To refer current class constructors 
---------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
=============
A "super" is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors 


1) To refer super class variables
---------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;
	B(int i,int j)
	{
		System.out.println(i+" "+j); // 1000  2000
		System.out.println(this.i+" "+this.j); // 100  200
		System.out.println(super.i+" "+super.j); // 10  20
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods 
-------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}


3) To refer super class constructor
-----------------------------------
class A 
{
	A()
	{
		System.out.println("A const");
	}
}
class B extends A 
{
	B()
	{
		super();
		System.out.println("B const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
	}
}


API 
====
API stands for application programming interface.

It is a base for the programmers to develop software application.

In java, API is a collection of packages.

We have three types of API's.

1) Predefined API 
-------------
	Built-In API is called predefined API.
	ex:
		https://docs.oracle.com/javase/8/docs/api/

2) Userdefined API 
---------------
	API which is created by the user based on the application requirements.

3) Third party API 
-----------------
	API which is given by third party vendor.
	ex:
		JAVAZOOM API
		IText API
		and etc.


Package
========
A package is a collection of classes,interfaces,enums and annotations.

Here enum is a special class and annotation is a special interface.

In general, a package is a collection of classes and interface.

A package is also known as folder or a directory.

In java, we have two types of packages.


1) Predefined packages 
---------------------
Built-In packages are called predefined packages.
ex:
		java.lang 
		java.io
		java.util
		java.sql
		java.util.stream
		java.time
		java.text 
		and etc.

2) Userdefined packages 
-----------------------
Packages which are created by the user based on the application requirements are called userdefined packages.

It is always recommanded to declare a package name in reverse order of url.
ex:
	com.ihub.www 
	com.google.www 
	and etc.

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test 
{
	public static void main(String[] args)
	{
		Calendar c=Calendar.getInstance();
		int h=c.get(Calendar.HOUR_OF_DAY);

		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else 
			System.out.println("Good Night");

	}
}

We can compile above program by using below command.
ex:
		current directory 
			|
	javac    -d     .    Test.java
		  |
	destination location 


We can run above program by using below command.
ex:
	java    com.ihub.www.Test 
			|     |
		package name classname 







































































































































































