Interface
==========
Interface is a collection of zero or more abstract methods.

Abstract method is a incomplete method because it ends with semicolon and does not have any body.

ex:
	void m1();

It is not possible to create objects for interfaces.

To implements abstract methods of an interface we will use implementation class.

It is possible to create object for implementation class because it contains methods with body.

By default every abstract method is a public and abstract.
ex:
	public abstract void m1();

Interface contains only constants i.e public static final.

syntax:
------
	interface <Interface_Name>
	{
		-
		- //abstract methods 
		- //constants
		-
	}

If we know only service requirement specification then we need to use interface.

Diagram: class35.1


ex:1
-----
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:2
----
interface A 
{
	public abstract void m1();
}

class Test
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all methods otherwise we will get compile time error.

ex:
----
interface A 
{
	public abstract void show();
	public void display();
	abstract void see();
	void view();
}
class B implements A 
{
	public void show()
	{
		System.out.println("Show Method");
	}
	public void display()
	{
		System.out.println("Display Method");
	}
	public void see()
	{
		System.out.println("See Method");
	}
	public void view()
	{
		System.out.println("View Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.show();
		a.display();
		a.see();
		a.view();
	}
}

A class can't extends more then one class simultenously.

But interface can extends more then one interface.

ex:
---
interface A 
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}

class Test
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}
class Test
{
	public static void main(String[] args)
	{
		Father f=new Child();
		f.height();

		Mother m=new Child();
		m.height();

		Child c=new Child();
		c.height();
	}
}

Note:
-----
According to Java 8 verion , Interface is a collection of abstract methods, default methods and static methods.	


According to Java 9 verion , Interface is a collection of abstract methods, default methods, static method, private methods.




Marker interface
================
Interface which does not have any constant and method is called marker interface.

In general, Empty interface is called marker interface.

We have following list of marker interfaces.

ex:
	Serializable 
	Cloneable 
	Remote 
	and etc.

Using marker interface we will get some ability to do.

ex:
	
	class Student implements java.io.Serializable
	{
		private int studId;
		private String studName;
		private double studFee;

		//setter and getter methods
		-
		-
		-
	}



Abstract class
===============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for classes and methods but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods of an abstract class we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
-----
	abstract class <clas_name>
	{
		-
		- //instance variables 
		- //abstract methods 
		- //concrete methods 
	}

If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Plan
{
	//instance variable 
	protected double rate;

	//abstract method
	public abstract void getRate();

	//concrete method 
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+(rate*units));
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan 
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}



Abstraction Example
===================
abstract class Shape 
{
	public abstract void area();
}
class Circle extends Shape 
{
	public void area()
	{
		int r=5;
		System.out.println(3.14f*r*r);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Circle c=new Circle();
		c.area();
	}
}

Q) What is the difference between interface and abstract class?

interface					abstract class
--------------					---------------
To declare interface we will use interface 	To declare abstract class we will use abstract 
keyword.					keyword.

It is a collection of abstract methods,		It is a collection of abstract methods and concrete
default methods and static methods.		methods.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It does not allow constructor.			It allows constructor.

It does not allow blocks.			it allows blocks.

To implement abstract methods of an interface	To implement abstract methods of abstract class
we will use implementation class.		we will use sub classes.

If we know specification then we need to use	If we know partial implementation then we need to
interface.					use abstract class.

























































