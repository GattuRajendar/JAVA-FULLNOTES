Enum
=====
Enum is a group of named constants.

Enum concept introduced in 1.5 version.

Using Enum we can create our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

To declare enum we will use enum keyword.

syntax:
-------
	enum  type_name
	{
		val1,val2,...valN
	}

ex:
---
	enum  Month
	{
		JAN,FEB,MAR
	}

Internal implementation of enum
--------------------------------
Every enum internally consider as class concept and it extends with java.lang.Enum class.

Every enum constant is a reference variable of enum type.

ex:


enum Month			final class Month extends java.lang.Enum
{				{
	JAN,FEB,MAR ==>			public static final Month JAN=new Month();
}					public static final Month FEB=new Month();
					public static final Month MAR=new Month();
				}

Declaration and Usage of enum
-------------------------------
enum Month
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
			Month m=Month.JAN;
			System.out.println(m);
	}
}


ex:
---
enum Month
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Month m=Month.FEB;
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March"); break;
		}
	}
}

java.lang.Enum
---------------
The power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1) values()
-----------
	It is a static method which returns list of constants from enum.

2) ordinal()
------------
	It is used to return ordinal numbers.

ex:
---
enum Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN	
}
class Test 
{
	public static void main(String[] args)
	{
		Week[] w=Week.values();

		for(Week w1:w)
		{
			System.out.println(w1+" -------- "+w1.ordinal());
		}
	}
}

When compare to old language enum, java enum is more powerful because in addition to constants
we can declare variables, methods and constructors.

ex:
---
enum Cloths
{
	SILK,COTTON,KHADI;

	Cloths()
	{
		System.out.println("constructor");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Cloths c=Cloths.SILK;	
	}
}

ex:
---
enum Cloths
{
	SILK,COTTON,KHADI;

	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);
	}
}

Wrapper classes
================
The main objective of wrapper classes are.

1) To wrap primitive to wrapper objects and vice versa.

2) To define several utility methods.

ex:

	Primitive type			wrapper object
	------------------		---------------
	byte				Byte
	short				Short
	int				Integer
	long				Long
	float				Float
	double				Double			
	boolean				Boolean
	char 				Character 

constructor
-----------
Every wrapper class contains following two constructors.One will take corresponding primitive as an argument and another will take corresponding String as an argument.

ex:
	Wrapper class			Costructor
	----------------		-----------
	Byte				byte or String 
	Short				short or String 
	Integer				int or String 
	Long				long or String 
	Float				float or String
	Double				double or String 
	Boolean				boolean or String
	Character 			char

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1);

		Integer i2=new Integer("20");
		System.out.println(i2);

	}
}


ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);

		Boolean b2=new Boolean("false");
		System.out.println(b2);

	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c=new Character('a');
		System.out.println(c); //a 

	}
}

Utility Methods
================

1) valueOf()
-----------
It is similar to constructor.

It is used to convert primitive type to wrapper object.

ex:

class Test 
{
	public static void main(String[] args)
	{
		Integer i1=Integer.valueOf(10);
		System.out.println(i1);

		Integer i2=Integer.valueOf("20");
		System.out.println(i2);
	}
}

 

2) xxxValue()
------------
It is used to convert wrapper object to primitive type.

ex:
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		byte b=i.byteValue();
		System.out.println(b);

		short s=i.shortValue();
		System.out.println(s);
	}
}


3) parseXxx()
-------------
It will convert string type to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		String str="100";

		int i=Integer.parseInt(str);
		System.out.println(i); //100

		long l=Long.parseLong(str);
		System.out.println(l);

		float f=Float.parseFloat(str);
		System.out.println(f);
	}
}


4) toString() 
-------------
It is used to convert wrapper object to string type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		String s=i.toString();

		System.out.println(s);//10
	}
}


Q) Write a java program to perform sum of two binary numbers?

Input:
	1010
	0101
Output:
	1111

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first binary :");
		String binary1=sc.next();//1010

		System.out.println("Enter the second binary :");
		String binary2=sc.next();//0101

		//convert binary to decial 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);
		int c=a+b;

		//convert decimal to binary
		String result=Integer.toBinaryString(c);
		System.out.println(result);
	}
}


Inner classes
============
Sometimes we will declare a class inside another class such concept is called inner class.
ex:
	class Outer_class
	{
		class Inner_class
		{
			-
			-
			-	
		}
	}

Inner classes introduced to remove GUI bugs.

But due to powerful features and benefits of inner classes , programmers started to use inner classes in regular programming.

Inner class does not allow static members.
 

Accessing inner class data from static area of outer class
----------------------------------------------------------
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("from M1 method");
		}
	}
	
	public static void main(String[] args)
	{
			Outer.Inner i=new Outer().new Inner();
			i.m1();
	}
}
Note:
----
	Once if compiled,two .class files will be generated i.e Outer.class and Outer$Inner.class.

ex:
---
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("M1 method");
		}
	}
	
	public static void main(String[] args)
	{
			new Outer().new Inner().m1();
	}
}


Accessing inner class data from non-static area of outer class
--------------------------------------------------------------

class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("M1 method");
		}
	}

	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}
	
	public static void main(String[] args)
	{
			Outer o=new Outer();
			o.m2();
	}
}






































	



































