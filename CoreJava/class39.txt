Q) Write a java program to find out most repeating character in a given string?

input:
	ihubtalentinstitute

output:
	t is repeating for 5 times

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="ihubtalentinstitute";

		int maxCount=0;
		char alphabet=' ';

		for(int i=0;i<str.length();i++)
		{
			int cnt=0;

			for(int j=0;j<str.length();j++)
			{
				if(str.charAt(i)==str.charAt(j))
				{
					cnt++;
				}
			}
			if(cnt>maxCount)
			{
				maxCount=cnt;
				alphabet=str.charAt(i);
			}
		}
		System.out.println(alphabet+" is repeating for "+maxCount+" times");
	}
}

Q)Write a java program to display the string starting with uppercase letters?

input:
	This is Java class For student

output:
	This  Java  For 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="This is Java class For student";

		String[] sarr=str.split(" ");
		
		for(String s:sarr)
		{
			if(s.charAt(0)>='A' && s.charAt(0)<='Z')
			{
				System.out.print(s+" ");
			}
		}
	}
}


Q) Write a java program to display palindrome strings?

input:
	racar is madam for java

ex:
	racar madam 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="racar is madam for java";

		String[] sarr=str.split(" ");
		
		for(String s:sarr)
		{
			//reverse the string
			char[] carr=s.toCharArray(); // r   a   c   a   r 
			
			String rev="";
			for(int i=carr.length-1;i>=0;i--)
			{
				rev+=carr[i];
			}

			if(s.equals(rev))
			{
				System.out.print(s+" ");
			}
			
		}
	}
}

StringBuffer
=============
If our content change frequently then it is never recommanded to use String object because for every change a new object will be created.

To overcome this limitation Sun Micro System introduced StringBuffer.

In StringBuffer all the required changes will be done in a single object or same object.


constructor
------------

1) StringBuffer sb=new StringBuffer()
=-------------------------------------
It will create empty StringBuffer object with default initial capacity of 16.

If capacity reaches to maximum capacity then new capacity will be created with below formulea.

ex:
	new capacity = current_capacity + 1 * 2;

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		System.out.println(sb.capacity());//16

		sb.append("abcdefghijklmnop");
		System.out.println(sb.capacity());//16

		sb.append("qr");
		System.out.println(sb.capacity());//16+1*2= 34
	}
}


2) StringBuffer sb=new StringBuffer(int initialcapacity)
------------------------------------------------------
It will create StringBuffer object with specified initial capacity.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer(19);
		System.out.println(sb.capacity());//19

	}
}

3) StringBuffer sb=new StringBuffer(String s)
-----------------------------------------
It will create StringBuffer object which is equivalent to String.

Here capacity will be created with below formulea.

ex:
	capacity = s.length() + 16;

ex:
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("bhaskar");
		System.out.println(sb.capacity());//7+16=23

	}
}

Q) Write a java program to display reverse of a string?

input:
	hello

output:
	olleh

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="hello";

		StringBuffer sb=new StringBuffer(str);

		String rev=sb.reverse().toString();
		
		System.out.println(rev);
	}
}

Q) Write a java program to check given string is palindrome or not?

input:
	racar 

output:
	It is a palindrome string 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="racar";

		StringBuffer sb=new StringBuffer(str);

		String rev=sb.reverse().toString();
		
		if(str.equals(rev))
			System.out.println("It is a palindrome string");
		else
			System.out.println("It is not a palindrome string");
	}
}

Q) Write a java program to display the string in a given format?

input:
	ABBCCCDDDD

output:
	A1B2C3D4

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="ABBCCCDDDD";

		StringBuffer sb=new StringBuffer();

		int count=1;

		for(int i=0;i<str.length();i++)
		{
			if(i<str.length()-1  && str.charAt(i)==str.charAt(i+1))
			{
				count++;
			}
			else
			{
				sb.append(str.charAt(i));
				sb.append(count);
				count=1;
			}
		}
		System.out.println(sb.toString());
	}
}

Q) Write a java program to multiply two arrays?

input:
	1 3 2
	2 5

output:
	3300 (132*25)

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr1={1,3,2};
		int[] arr2={2,5};

		int a=Integer.parseInt(arrayToString(arr1));
		int b=Integer.parseInt(arrayToString(arr2));
		System.out.println(a*b);
	}

	public static String arrayToString(int[] arr)
	{
		StringBuffer sb=new StringBuffer();
		for(int i:arr)
		{
			sb.append(i);
		}

		return sb.toString();
	}
}

Q) Write a java program to perform string encoding ?

input:
	1106

output:
	AAJF 

Explaination
-----------
1 - A 
2 - B 
3 - C 
4 - D 
5 - E 
6 - F
7 - G 
8 - H
9 - I 
10 - J

ex
class Test  
{
	public static void main(String[] args) 
	{
		String str="1106";
		String result=encodeString(str);
		System.out.println(result);
	}

	public static String encodeString(String str)
	{
		StringBuffer sb=new StringBuffer();

		for(int i=0;i<str.length();i++)
		{
			int n=Integer.parseInt(Character.toString(str.charAt(i)));

			if(n!=0)
			{
				sb.append((char)('A'+ n-1));
			}
			else
			{
				String res=str.substring(i-1,i+1);
				int digit=Integer.parseInt(res);
				sb.append((char)('A'+ digit-1));
			}
		}

		return sb.toString();
	}
}


StringBuilder
=============
StringBuilder is exactly same as StringBuffer with following differences.

StringBuffer 					StringBuilder
----------------				---------------
All the methods present in StringBuffer are 	No method present in StringBuilder is synchronized.
synchronized.

At a time only one thread is allowed to access	Multiple threads are allowed to access 
StringBuffer object.Hence we can achieve 	StringBuilder object.Hence we can't achieve	
thread safety.					thread safety.

Waiting time of a thread will increase		There is no waiting threads effectively  
effectively performance is low.			performance is high.

It is introduced in 1.0v.			It is introduced in 1.5v.


Note:
-----
If our content not change frequently then it is recommanded to use String objct.

If our content change frequently where thread safety is required then it is recommanded to use StringBuffer object.

If our contet change frequently where thread safety is not required then it is recommanded to use StringBuilder object.



StringTokenizer
===============
StringTokenizer class present in java.util package.

It is used to tokenize the string irrespective of regular expression.

We can create StringTokenizer class object as follow.

ex:
	StringTokenizer st=new StringTokenizer(String str,RegularExpress regex);

StringTokenizer class contains following methods.
ex:
	public int countTokens()
	public boolean hasMoreTokens()
	public String nextToken()
	public boolean hasMoreElements()
	public Object nextElement() 

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class");
		System.out.println(st.countTokens());
	}
}


ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreTokens())
		{
			String str=st.nextToken();
			System.out.println(str);
		}
	}
}

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreElements())
		{
			String str=(String)st.nextElement();
			System.out.println(str);
		}
	}
}

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("9,99,999",",");
		
		while(st.hasMoreElements())
		{
			String str=(String)st.nextElement();
			System.out.println(str);
		}
	}
}

























































































