Exception Handling
==================

Q) What is the difference between Exception and Error?

Exception 
----------
	Exception is a problem for which we can provide solution programmatically.
	Exception will raise due to syntax errors.
	ex:
		FileNotFoundException
		ArithmeticException
		IllegalArgumentException 
		and etc.

Error
------
	Error is a problem for which we can't provide solution programmatically.
	Error will raise due to lack of system resources.
	ex:
		OutOfMemoryError
		LinkageError 
		StackOverFlowError 
		and etc.


As a part of java application development it is a responsibility of a programmer to provide 
smooth termination for every java program.

We have have two types of terminations.

1) Smooth termination / Graceful termination 
----------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.

ex:

class  Test
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}

2) Abnormal termination 
-----------------------
During the program execution suppose if we are getting any interruption in the middle of the program such type of termination is called abnormal termination.

ex:
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program so we must and should handle that exception otherwise our program will terminates abnormally.

Here exception will display name of the exception ,description of the exception and line number of the exception.


Exception
=========
It is a unwanted, unexpected event which disturbs normal flow of our program.

Exception always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java , exceptions are divided into two types.

1) Predefined exceptions 

2) Userdefined exceptions 

1) Predefined exceptions 
------------------------
Built-In exceptions are called predefined exceptions.

It is classified into two types.

i) Checked exceptions 
-----------------------
Exceptions which are checked by the compiler at the time of compilation are called checked exceptions.

ex:
	FileNotFoundException 
	EOFException 
	InterruptedException 
	and etc.	

ii) Unchecked exceptions 
-------------------------
Exceptions which are checked by the JVM at the time of runtime are called runtime exceptions.
ex:
	ArithmeticException 
	ClassCastException 
	IllegalArgumentException 
	and etc.

Diagram: class40.1

If any checked exception raised in our program we must and should handle that exception by using try and catch block.


Try block
==========
It is a block which contains risky code.

It is always associate with catch bock.

If any exception raised in try block then it won't be executed.

A try block is used to throw the exception to catch block.


Catch block
===========
It is a block which contains Error Handling code.

A catch block always associate with catch block.

A catch bock is used to catch the exception which is thrown by try block.

If there is no exception in try block then catch block won't be executed.

A catch block will take exception name as a parameter and that name must match with exception class name.

syntax
-----
	try
	{
		-
		- //Risky Code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		-
		-
	}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block 


ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	catch-block

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block 


Try with Multiple catch blocks
================================
A try block can have multiple catch blocks.

If a try block contains multiple catch blocks then order of catch block is very important it should be from child to parent but not from parent to child.

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch(Exception e)
		{
			System.out.println("From E");
		}
	}
}


Q) How can we handle multiple exceptions in a single catch block ?

class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException | NullPointerException | IllegalArgumentException  e)
		{
			System.out.println("from catch block");
		}
		
	}
}


Various methods to display exception details
===========================================
Throwable class defines following three methods to display exception details.

1) printStackTrace()
-------------------
	It will display name of the exception, description of the exception and line number 
	of the exception.

2) toString() 
----------
	It will display name of the exception and description of the exception.

3) getMessage() 
-------------
	It will display description of the exception.


ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();

			System.out.println("------------------------");

			System.out.println(ae.toString());

			System.out.println("------------------------");

			System.out.println(ae.getMessage());
		}
		
	}
}

finally block
=============
It is never recommanded to maintain cleanup code in try block because if any exception raised in our try block then try block won't be executed.

It is never recommanded to maintain cleanup code in catch block because if there is no exception in try block then catch block won't be executed.

But we need to place where we can maintain cleanup code and it should execute irrespective of exception raised or not. Such block is called finally block.

syntax:
-------
	try
	{
		-//risky code 
	}
	catch(Exception e)
	{
		-//Error handling code 
	}
	finally
	{
		-//cleanup code 
	}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:	
	try-block
	finally-block

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
	finally-block

A try with finally combination is valid in java.

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	finally-block 



Q) What is difference between final, finally and finalize method?

final
-----
It is a modifier which is applicable for variables, methods and classes.

If we declare any varible as final then reassignment of that variable is not possible.

If we declare any method as final then overriding of that method is not possible.

If we declare any class as final then creating child class is not possible.


finally 
--------
It is a block which contains cleanup code and it will execute irrespective of exception raise or not.

finalize 
--------
It is a method called by garbage collector just before destroying an object for cleanup activity.


throw statement
===============
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement
ex:
	throw new ArithmeticException(" dont divide any number with zero ");

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}
Here exception object is created and handover to JVM by main method.

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("Don't divide by zeroo");
	}
}
Here exception object is created explicitly and handover to JVM manually by using throw statement.



throws statement
===============
If any checked exceptions raised in our program then we need to handle that exceptions by using try and catch block or by using throws statement.

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
	}
}

ex:
---
class  Test
{
	public static void main(String[] args)throws InterruptedException 
	{

			Thread.sleep(5000);
			System.out.println("Welcome to Java");
	}
}





2) Userdefined Exceptions
===========================
Exceptions which are created by the user based on the application requirements are called userdefined exceptions.

ex:
	ACNotWorkingException 
	NoInterestInJavaException 
	NoPractiveException 
	TooYoungException
	TooOldException 

ex:
--
import java.util.Scanner;
class TooYoungException extends RuntimeException 
{
	TooYoungException(String s)
	{
		super(s);
	}
}

class TooOldException extends RuntimeException 
{
	TooOldException(String s)
	{
		super(s);
	}
}
class  Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();

		if(age<18)
			throw  new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
	}
}






	



































































 















































































































































































































