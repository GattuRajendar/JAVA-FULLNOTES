Multithreading
===============

Q) What is the difference between Thread and Process?

Thread	
------
A thread is a light weight sub process.

We can run multiple threads concurently.

One thread can communicate with another thread.

ex:
	class is one thread 
	block is one thread 
	constructor is one thread


Process
-------
A process is a collection of threads.

We can run multiple process concurently.

One process can't communicate with another process.
ex:
	downloading a file from internet is one process
	typing the notes in editor is one process
	taking a class using zoom metting is one process



Multitasking
=============
Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Thread based multitasking
---------------------------
Executing several task simultenously where each task is a same part of a program.
It is best suitable for programmatic level.

2) Process based multitasking 
------------------------------
Executing several task simultenously where each task is a independent process.
It is best suitable for OS level.


Multithreading
===============
Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by JAVA API.

The main important application area of multithreading are.

1) To implements multimedia graphics.

2) To develop animations.

3) To develop video games.

Ways to create thread in java
=============================
There are two ways to create a thread in java.

1) By extending Thread class 

2) By implementing Runnable interface


1) By extending Thread class 
-----------------------------
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//start a thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread Schedular
-------------------------
If multiple threads are waiting for execution which thread must execute will decide by thread schedular.

What algorithm , mechanism or behaviour used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.


case2: Difference between t.start() and t.run() method
--------------------------------------------------------
If we invoke t.start() method then a new thread will be created which is responsible to execute run() method automatically.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//start a thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method then no new thread will be created but run() method will execute just like normal method.

ex:
---
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//no new thread
		t.run();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case3: If we won't override run() method
----------------------------------------
If we won't override run() method then Thread class run() method will execute automatically.

Thread class run() method is a empty implementation.

ex:

class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case4: If we overload run() method 
----------------------------------
If we overload run() method then Thread class start() method always execute run() method with zero-argument only.

ex:
class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case5: Life cycle of a thread
------------------------------

Diagram: class46.1

1) Once if we create a thread object then our thread is in new or born state.

2) Once if we call t.start() method our thread enters to ready/runnable state.

3) If thread schedular allocates to CPU then our thread goes to running state.

4) Once the run() method execution is completed our thread goes to dead state.



2) By implementing Runnable interface
------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyRunnable r=new MyRunnable();
		
		Thread t=new Thread(r); // r is a targatable interface

		//new thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
			
	}
}

Setting and Getting name of a thread
====================================
In java , every thread has a name explicitly provided by the programmer or automatically generated by JVM.

We have following methods to set and get name of a thread.
ex:
	public final void setName(String name);
	public final String getName();

ex:
--

class MyThread extends Thread 
{

}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());// main 

		MyThread t=new MyThread();
		System.out.println(t.getName());// Thread-0

		Thread.currentThread().setName("parent-thread");
		System.out.println(Thread.currentThread().getName());// parent-thread

		t.setName("child-thread");
		System.out.println(t.getName());//child-thread
	}
}

Thread Priority
===============
In java, every thread has a priority explicitly provided by the programmer or automatically generatead by JVM.

The valid range of thread priority is 1 to 10. Where 1 is a least priority and 10 is a highest priority.

If we take any priority more then 1 to 10 then we will get IllegalArgumentException.

A Thread class defines following standard constants for thread properties.

ex:
	Thread.MAX_PRIORITY  - 10
	Thread.MIN_PRIORITY  - 1 
	Thread.NORM_PRIORITY - 5

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY. 

A thread which is having highest priority will be executed first.

If multiple threads having same priority then we can't expect execution order.

Thread schedular uses thread priority while allocating to CPU.

We have following list two methods to set and get thread priority.
ex:
	public final void setPriority(int priority)
	public final int getPriority() 

ex:
--
class MyThread extends Thread 
{

}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());// 5

		MyThread t=new MyThread();
		System.out.println(t.getPriority());// 5

		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority());// 9

		t.setPriority(4);
		System.out.println(t.getPriority());//4

		//t.setPriority(11); // R.E IllegalArgumentException
	}
}


In how many ways we can prevent a thread from execution
================================================
There are three ways to prevent(stop) a thread from execution.

1) yield() 

2) join() 

3) sleep() 

1) yield()
------------
It pause the current execution thread and gives the chance to other threads having same priority.

If there is low priority threads or no waiting threads then same thread will continue it's execution.

If multiple threads having same priority then we can't expect any execution order.

A thread which yielded when it will get a chance for execution is depends upon mercy of thread schedular.

ex:
	public static native void yield();

Diagram: class46.2

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			Thread.currentThread().yield();
			System.out.println("child-thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("parent-thread");
		}
	}
}



















2) join()
--------
If a thread wants to wait untill the completion of another thread then we need to use join() method.

A join() method throws one checked exception called InterruptedException so we must and should handle that exception by using try and catch block or using throws statement.

ex:
	public final void join()throws InterruptedException
	public final void join(long ms)throws InterruptedException
	public final void join(long ms,int ns)throws InterruptedException

Diagram: class46.3

ex:
--
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("child-thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t=new MyThread();
		t.start();
		t.join();
		for(int i=1;i<=5;i++)
		{
			System.out.println("parent-thread");
		}
	}
}












3) sleep() 
----------
If a thread don't want to perform any operation on perticular amount of time then we need to use
sleep() method.

A sleep() method will throw one runtime exception called InterruptedException so we must and should handle that exception by using try and catch block or using throws statement.

ex:
	public static native void sleep()throws InterruptedException
	public static native void sleep(long ms)throws InterruptedException
	public static native void sleep(long ms,int ns)throws InterruptedException

Diagram: class46.4

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("child-thread");
			try
			{
				Thread.sleep(2000);
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("parent-thread");
		}
	}
}






























