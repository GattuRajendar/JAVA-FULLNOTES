Java 8 Features
===============


Functional interface
====================
Interface which contains only one abstract method is called functional interface.

It can have any number of default methods and static methods. 

It is also known as SAM interface or Single Abstract Method interface.

It is used to achieve functional programming.
ex:
	a = f1()
	{
	}

	f1(f2(){})
	{
	}

@FunctionalInterface annotation is used to declare functional interface which is optional.

syntax:
------
	@FunctionalInterface 
	interface  <interface_name>
	{
		- // 1 abstract method 
		- // default methods 
		- // static methods 	
	}

ex:
---
@FunctionalInterface
interface A 
{
	public abstract void m1();
}
class B implements A
{
	public void m1()
	{
		System.out.println("M1 Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new B();
		a.m1();
	}
}

ex:
---
@FunctionalInterface
interface A 
{
	public abstract void m1();
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}





Lamda Expression
================
Lamda expression introduced in Java 8.

Lamda expression is used to concise (reduce) the code.

We can use lamda expression when we have functional interface.

Lamda expression consider as method not a class.

The main objective of lamda expression is to achieve functional programming.

Lamda expression does not allow name, returntype and modifier.

ex:
	java method 
	----------
	public void m1()
	{
		System.out.println("Hello World");
	}
	
	lamda expression
	-------------
	()->
	{
		System.out.println("Hello World");
	};


ex:
---
@FunctionalInterface
interface A 
{
	public abstract void m1();
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=()->
		{
			System.out.println("This is M1 Method");
		};
		a.m1();
	}
}


ex:
---
@FunctionalInterface
interface A 
{
	public abstract void m1(int i,int j);
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=(int i,int j)->
		{
			System.out.println(i+j);
		};
		a.m1(10,20);
	}
}

ex:
---
@FunctionalInterface
interface A 
{
	public abstract int m1(int i,int j);
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=(int i,int j)->
		{
			return i+j;
		};
		System.out.println(a.m1(10,20));
	}
}


Default methods in interface
============================
Java provides facility to declare default methods in interface.

If we declare any method in interface and tagged with default keyword then it is called default method.

A default method is a non-abstract method.

Default methods we can override.


ex:
---
@FunctionalInterface 
interface A 
{
	//abstract method 
	public abstract void m1();

	//default method
	default void m2()
	{
		System.out.println("default method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1 - Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new B();
		a.m1();
		a.m2();
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	//abstract method 
	public abstract void m1();

	//default method
	default void m2()
	{
		System.out.println("default method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1 - Method");
	}
	public void m2()
	{
		System.out.println("Ovveride default method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new B();
		a.m1();
		a.m2();
	}
}

Using default method of an interface we can achieve multiple inheritance.

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		System.out.println("Middle-M1 Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}


ex:
----
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Right.super.m1();
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Left.super.m1();
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

ex:
--
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left
{
	public void m1()
	{
		Right.super.m1();
		Left.super.m1();
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

Static methods in interface
===========================
Java provides facility to declare static methods in interface.

If a method is declared in interface and tagged with static keyword is called static method.

It is a non-abstract method.

We can't override static methods.

ex:
---
interface A 
{
	//static method
	static void m1()
	{
		System.out.println("M1 Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A.m1();
	}
}

Stream API 
==========
Stream API introduced in Java 8.

A Stream is an interface which is present in java.util.stream package.

It is used to process the objects from collections.

It is used to perform bulk operations on collections.


ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,8,2,9,6,1,3);

		List<Integer> newList = list.stream().filter(i->i%2==0).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,8,2,9,6,1,3);

		List<Integer> newList = list.stream().filter(i->i%2!=0).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,8,2,9,6,1,3);

		List<Integer> newList = list.stream().map(i->i+10).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(89,45,12,38,44,72,25);

		List<Integer> newList = list.stream().filter(i->i<35).collect(Collectors.toList());

		System.out.println(newList);
	}
}


ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(89,45,12,38,44,72,25);

		long failed= list.stream().filter(i->i<35).count();

		System.out.println(failed);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,1,3,9,5,4);

		List<Integer> newList= list.stream().sorted().collect(Collectors.toList());

		System.out.println(newList);
	}
}


ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,1,3,9,5,4);

		List<Integer> newList= list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,1,3,9,5,4);

		long max= list.stream().max((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(max);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,1,3,9,5,4);

		long min= list.stream().min((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(min);
	}
}


forEach() method
================
It is used to iterate the objects from Collections.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,1,3,9,5,4);

		list.forEach(element -> System.out.print(element+" "));	
	}
}


Q) Write a java program to display the objects from Map interface using forEach() method?

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Map<Integer,String> map=new LinkedHashMap<Integer,String>();
		map.put(1,"one");
		map.put(5,"five");
		map.put(10,"ten");

		map.forEach((key,value) -> System.out.println(key+" = "+value));
	}
}


Method Reference (::)
=====================
Method reference is used to refer method of functional interface. 

It is compact and easy form of lambda expression.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,3,1,6,9,4);

		list.forEach(System.out::println);
	}
}



Q) Write a java program to display employee records in ascending order of employee id ?

import java.util.*;
import java.util.stream.*;
class Employee
{
	private int empId;
	private String empName;
	private double empSal;

	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(104,"Jose",4000d));
		list.add(new Employee(101,"Mark",1000d));
		list.add(new Employee(103,"Alan",3000d));
		list.add(new Employee(102,"Julie",2000d));

		List<Employee> newList=list.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());

		newList.forEach(employee -> System.out.println(employee.getEmpId()+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}


Q) Write a java program to display employee records in sorting order of employee name ?

import java.util.*;
import java.util.stream.*;
class Employee
{
	private int empId;
	private String empName;
	private double empSal;

	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(104,"Jose",4000d));
		list.add(new Employee(101,"Mark",1000d));
		list.add(new Employee(103,"Alan",3000d));
		list.add(new Employee(102,"Julie",2000d));

		List<Employee> newList=list.stream().sorted(Comparator.comparing(Employee::getEmpName)).collect(Collectors.toList());

		newList.forEach(employee -> System.out.println(employee.getEmpId()+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}


























































