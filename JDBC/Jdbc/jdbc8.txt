Thin-client/Fat-server application
===================================
Every JDBC application is a thin-client/fat-server application.

Diagram: jdbc8.1

To develop thin-client/fat-server application we need to save business logic and persistence logic in the database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.

ex:
---

PL/SQL procedure
----------------
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
is
begin
C:=A+B;
end;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//Register OUT parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute the stmt
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}

Types of ResultSet objects
===========================
We have two types of ResultSet objects.

1) Non-Scrollable ResultSet object 

2) Scrollable ResultSet object 

Diagram: java8.2 


1) Non-Scrollable ResultSet object 
----------------------------------
If a ResultSet object which allows us to read the records sequentially or uni-directionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If JDBC Statement object is created without type,mode value then that ResultSet object is called non-scrollable ResultSet object.

ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2) Scrollable ResultSet object
-------------------------------
If a ResultSet object which allows us to read the records non-sequentially or bi-directionally or randomly is called scrollable ResultSet object.


If JDBC Statement object is created with type,mode value then that ResultSet object is called scrollable ResultSet object.

ex:
	Statement st=con.createStatement(type_value,mode_value);
	ResultSet rs=st.executeQuery("select * from student");


Note:
----
	We have following two TYPE values.
	ex:
		ResultSet.TYPE_SCROLL_SENSITIVE
		ResultSet.TYPE_SCROLL_INSENSITIVE

	We have following two MODE values.
	ex:
		ResultSet.CONCUR_READ_ONLY
		ResultSet.CONCUR_UPDATABLE


Various methods present in Scrollable ResultSet object
------------------------------------------------------
rs.next()
---------
	It will move record pointer to next position.

rs.previous()
------------
	It will move record pointer to previous position.

rs.getXxx()
---------
	It will return values of record ResultSet.

rs.close()
-----------
	It will close ResultSet object.

rs.getRow()
---------
	It will return position of record pointer.

rs.first()
---------
	It will set record pointer to first record.

rs.isFirst()
-----------
	It will check record pointer is in first record or not.

rs.last()
--------
	It will set the record pointer to last record.

rs.isLast()
-----------
	It will check record pointer is in last record or not.

rs.beforeFirst()
-------------
	It will set the record pointer to BFR position.

rs.afterLast()
----------
	It will set the record pointer to ALR position.

rs.relative(+/-)
----------------
	It will move record pointer to next position from current position.

rs.absolute(+/-)
------------
	It will move record pointer to next position from BFR and ALR position.


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableResultSet 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
											ResultSet.CONCUR_READ_ONLY);
		
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		//read the records from top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		//bottom to top 
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		
		rs.last();
		System.out.println(rs.isLast());//true
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		st.close();
		con.close();
	}
}



Working with properties file
=============================
In regular intervals, our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly to the application.

IT is always recommanded to read databse properties from properties file.

A properties file contains key and value pair.


dbdetails.properties
-------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 


PropertiesApp.java
-------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;

public class PropertiesApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate properties file 
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class object
		Properties p=new Properties();
		
		//load the data from file to properties class
		p.load(fis);
		
		//read the data from properties class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		String qry="select * from student";
		PreparedStatement ps=con.prepareStatement(qry);
		ResultSet rs=ps.executeQuery();
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.close();
		ps.close();
		con.close();

	}
}

Batch Processing
=================
It is used to declare multiple queries to batch and makes a single call to database.

To add each query to batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(query);

To execute the batch we need to use executeBatch() method of Statement object.
ex:
	st.executeBatch(); 


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessing 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//declare the queries
		String qry1="insert into student values(104,'jose','usa')";    //1
		String qry2="update student set sname='rani' where sname='raja'"; //1
		String qry3="delete from student where sno=103"; //1
		
		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		System.out.println("No of records effected are :"+sum);
		
		st.close();
		con.close();
	}
}
















































































