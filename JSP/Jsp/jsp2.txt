JSP Tags/Elements
=================
JSP mainly contains three tags.

1) Scripting tags
----------------
	i) scriptlet tag 
		ex:
			<%   code Here   %>

	ii) Expression tag 
		ex:
			<%=   code Here  %>

	iii) Declaration tag 
		ex:
			<%!   code Here  %>

2) Directive tags 
-----------------
	i) Page directive tag 
		ex:
			<%@page  attribute=value %>
		
	ii)Include directive tag 
		ex:
			<%@include  attribute=value %>

3) Action tags 
--------------
	<jsp:include> 
	<jsp:forward>
	<jsp:useBean>
	<jsp:setProperty>
	<jsp:getProperty>
	and etc.


Comments in JSP
------------
	<%--  comment here --%>


i) scriptlet tag 
=================
It is used to declare java code.

syntax:
-------
	<%  code Here  %>


Deployment Directory Structure
-----------------------------
JspApp2
|
|---Java Resources
|	
|---WebContent
	|
	|---form.html
	|---process.jsp
	|
	|---WEB-INF
		|
		|----web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
----------

<form action="process.jsp">
	
	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>
	
</form>

process.jsp
----------
<center>
<h1>
<%
	
	String name=request.getParameter("t1");
	out.println("Welcome :"+name);
%>
</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

Request url
-----------
	http://localhost:8080/JspApp2/


ii) Expression tag
==================
The code which is written in expression tag will return to the output stream of a response.

It means we don't need to use out.println() method to print the data.

syntax:
------
	<%=   code Here %> 

Note:
----
	Expression tag does not allow semicolon.


Deployment Directory Structure
-----------------------------
JspApp2
|
|---Java Resources
|	
|---WebContent
	|
	|---form.html
	|---process.jsp
	|
	|---WEB-INF
		|
		|----web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
----------

<form action="process.jsp">
	
	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>
	
</form>

process.jsp
----------
<center>
<h1>
<%
	
	String name=request.getParameter("t1");
%>
<%=  "Hey! Welcome :"+name %>
</h1>
</center>


web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

Request url
-----------
	http://localhost:8080/JspApp2/


iii) Declaration tag 
====================
It is used to declare fields and methods.

syntax:
-------
	<%!    code here  %>

Deployment Directory Structure 
------------------------------
JspApp3
|
|---Java Resources
|
|---WebContent
	|
	|---index1.jsp
	|---index2.jsp
	|	
	|---WEB-INF
		|
		|---web.xml 
Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

index1.jsp
----------
<%!

	int i=10;
	
%>
<center>
<h1>
<%= "The value of I is ="+i %>
</h1>
</center>




index2.jsp
----------
<%!
	
	int cube(int n)
	{
		return n*n*n;
	}

%>

<center>
	<h1>
		<%=  "Cube of a given number is ="+cube(5) %>
	</h1>
</center>



web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
</web-app>


Request url
-------
	http://localhost:8080/JspApp3/index1.jsp
	http://localhost:8080/JspApp3/index2.jsp 

Exception Handling in JSP
==========================
Exceptions are runtime errors.

We don't know when exception may raise in our application so handling exceptions is always safer side for the programmer.

There are two ways to handle the exceptions in JSP.

1) Using errorPage and isErrorPage attribute of page directive tag 

2) Using <error-page> element in web.xml file 


1) Using errorPage and isErrorPage attribute of page directive tag 
--------------------------------------------------------------------

Deployment Directory structure
---------------------------
JspApp4
|
|---Java Resources
|
|---WebContent
	|
	|----form.html
	|----process.jsp
	|----error.jsp
	|	
	|----WEB-INF
		|		
		|----web.xml 
Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------

<form action="process.jsp">
	
	No1: <input type="text" name="t1"/> <br>
	
	No2: <input type="text" name="t2"/> <br>
	
	<input type="submit"  value="divide"/>
	
</form>

process.jsp
-----------
<%@page  errorPage="error.jsp" %>
<%
	String sno1=request.getParameter("t1");
	String sno2=request.getParameter("t2");
	
	int a=Integer.parseInt(sno1);
	int b=Integer.parseInt(sno2);
	int c=a/b;
%>
<%=  "Division of two numbers is ="+c %>
	
error.jsp
-----------
<%@page isErrorPage="true" %>

<b><i>
	Sorry! Exception occured!  <br>
	
	<%=  exception %>
</i></b>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

Request url
-------
	http://localhost:8080/JspApp4/




2) Using <error-page> element in web.xml file 
------------------------------------------
This approach is recommanded to use because we don't need to define errorPage attribute in each JSP file. Defining a single entry in web.xml file can handle all types of exceptions.

Deployment Directory structure
---------------------------
JspApp4
|
|---Java Resources
|
|---WebContent
	|
	|----form.html
	|----process.jsp
	|----error.jsp
	|	
	|----WEB-INF
		|		
		|----web.xml 
Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------

<form action="process.jsp">
	
	No1: <input type="text" name="t1"/> <br>
	
	No2: <input type="text" name="t2"/> <br>
	
	<input type="submit"  value="divide"/>
	
</form>

process.jsp
-----------
<%
	String sno1=request.getParameter("t1");
	String sno2=request.getParameter("t2");
	
	int a=Integer.parseInt(sno1);
	int b=Integer.parseInt(sno2);
	int c=a/b;
%>
<%=  "Division of two numbers is ="+c %>
	
error.jsp
-----------
<%@page isErrorPage="true" %>

<b><i>
	Sorry! Exception occured!  <br>
	
	<%=  exception %>
</i></b>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <error-page>
  	<exception-type>java.lang.Exception</exception-type>
  	<location>/error.jsp</location>
  </error-page>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>



Request url
-------
	http://localhost:8080/JspApp4/


Servlets					JSP
--------					-----
To work with servlets strong java knowledge 
is required.					To work with JSP strong java knowledge is 
						not required.

It is not suitable for non-java programmers.	It is suitable for non-java programmers.

It does not support tags.			It supports tags.

It does not give any implicit object.		It gives 9 implicit objects.

Configuration of servlet program in web.xml 
file is mandatory.				Configuration of jsp program in web.xml file 
						is optional.

Handling exceptions are mandatory.		Handing exceptions is optional.

We canâ€™t maintain HTML code and Java code 
separately.					We can maintain HTML code and Java code separately.

It runs faster than JSP.			It runs slower than servlet because it takes 
						time to compile the program and convert into 
						Servlets.























