2) Custom Tags in JSP
====================
Tags which are created by the user based on the application requirement is called custom tags. 

ex:
	<ihub:qualitythought>
	<ihub:student> 	
	<ihub:faculty>
	and etc.

To create custom tags we need to use taglib directive.

syntax:
-------
	<%@taglib   uri="urioftaglibdirective"    prefix="prefixoftaglibdirective" %>

To configure tag information we need to create TLD (Tag Library Descriptor) file. 


Deployment Directory Structure
-----------------------------
JspApp10
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---CubeNumber.java
|---WebContent
	|
	|----process.jsp
	|
	|----WEB-INF
		|
		|------web.xml
		|------mytags.tld
		|
		|------lib 
			|
			|---jsp-api.jar 
			
Note:
----
In above application we need to add "servlet-api.jar" and "jsp-api.jar" file in project build path.

Copy and paste "jsp-api.jar" file inside "WEB-INF/lib" folder seperately.


process.jsp
-----------

<%@taglib uri="/WEB-INF/mytags.tld"  prefix="ihub" %>

<center>
	<h1>
		Cube Of a Given Number is =<ihub:cube  number="5"/>
		
	</h1>
</center>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>process.jsp</welcome-file>
  </welcome-file-list>
  
</web-app>

mytags.tld
----------
<?xml version="1.0" encoding="ISO-8859-1" ?>  
<!DOCTYPE taglib  
        PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"  
    "http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd">  
  
<taglib>  
  
  <tlib-version>1.0</tlib-version>  
  <jsp-version>1.2</jsp-version>  
  <short-name>simple</short-name>  
  <uri>http://tomcat.apache.org/example-taglib</uri>  
  
  <tag>
  	<name>cube</name>
  	<tag-class>com.ihub.www.CubeNumber</tag-class>
  	<attribute>
  		<name>number</name>
  		<required>true</required>
  	</attribute>
  </tag>
 

</taglib> 

CubeNumber.java
--------------
package com.ihub.www;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

public class CubeNumber extends TagSupport
{
	private int number;
	
	//setter method
	public void setNumber(int number)
	{
		this.number=number;
	}

	public int doStartTag()throws JspException
	{
		JspWriter out=pageContext.getOut();
		try
		{
			out.println(number*number*number);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return SKIP_BODY;
	}
}

Request url
--------
	http://localhost:8080/JspApp10/

MVC in JSP
==========
MVC stands for Model View Controller.

It is one of the design patter which seperates business logic, persistence logic and data.

Controller acts like a mediator or interface between Model and View.

Controller is used ot intercept all incoming request.

Model contains data and some times it contains business logic.

View represent User Interface.

Diagram: jsp4.1


Deployment Directory Structure
------------------------------
JspApp11
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---LoginSrv.java
			|---LoginBean.java
|
|---WebContent 
	|
	|---form.html
	|---view.jsp
	|---error.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<form action="test">

	<table align="center">
		
		<tr>
			<td>UserName:</td>
			<td><input type="text" name="username"/></td>
		</tr>
		<tr>
			<td>Password:</td>
			<td><input type="password" name="password"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
		
	</table>

</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
  <servlet>
  	<servlet-name>LoginSrv</servlet-name>
  	<servlet-class>com.ihub.www.LoginSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>LoginSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  
</web-app>


LoginBean.java
---------------
package com.ihub.www;

public class LoginBean 
{
	private String username;
	private String password;
	
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}


LoginSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class LoginSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String uname=req.getParameter("username");
		String pass=req.getParameter("password");
		
		//set the data to bean class 
		LoginBean lb=new LoginBean();
		lb.setUsername(uname);
		lb.setPassword(pass);
		
		//send the bean object to jsp
		req.setAttribute("bean", lb);
		
		if(pass.equals("admin"))
		{
			RequestDispatcher rd=req.getRequestDispatcher("view.jsp");
			rd.forward(req, res);
		}
		else
		{
			RequestDispatcher rd=req.getRequestDispatcher("error.jsp");
			rd.forward(req, res);
		}
		
		pw.close();
	}
}

view.jsp
-------
<%@page   import="com.ihub.www.LoginBean" %>

<%
	LoginBean lb=(LoginBean)request.getAttribute("bean");
%>

UserName : <%= lb.getUsername() %> <br>
Password : <%= lb.getPassword() %> <br>



error.jsp
--------
<center>
	<b style="color:red">Sorry! Incorrect username or password </b>
</center>

<%@include  file="form.html" %>


Request url
-----------
	http://localhost:8080/JspApp11/	



Steps to deploy war file in a Tomcat server
===========================================
step1:
------
	Make sure dynamic web project is ready.

step2:
-----
	Convert dynamic web project to war file.
	ex:
		right click to JspApp11 ---> Export ---> war file --> 
		select destination(desktop) ---> finish.

step3:
------
	Goto Tomcat home folder and start tomcat server manually.
	ex:
		C:\Program Files\Apache Software Foundation\Tomcat 9.0\bin

step4:
-----
	Goto Tomcat console page and click to Manager App.
	ex:
		http://localhost:8080

		username : admin 
		password : admin 

step5:
------
	Scroll down and click to Choose file to deploy the web application.
	






















































































