Types of communication
======================
We can communicate to servlet program in three ways.

1) Browser to servlet communication 

2) HTML to servlet communication 

3) Servlet to servlet communication 

In browser to servlet communication we need to type our request url in browser address bar.

Typing request url in browser address bar is quit complex.

To overcome this limitation we need to use HTML to servlet communication.

In html to servlet communication we can give the request to servlet program by using html based hyperlink or form page.

A request which is generated by using hyperlink does not carry the data.

A request which is generated by using form page will carry the data.

In html based hyperlink to servlet communication we need to type our request url as href url.

ex:
	<a href="http://localhost:8080/DateApp/test"> click Here </a>

In html based form page to servlet communication we need ot type our request url as action url.

ex:
	<form action="http://localhost:8080/DateApp/test">
		-
		-
		-
	</form>	



Example application on HTML based hyperlink to Servlet communication
=====================================================================
Diagram: servlet3.1

Deployment Directory Structure
------------------------------
WishApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---WishSrv.java
|---WebContent 
	|
	|----index.html 
	|
	|----WEB-INF
		|	
		|----web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.


It is never recommanded to extends a servlet class with GenericServlet class because it won't give HTTP protocol features.

It is always recommanded to extends a servlet class with HttpServlet class because it will give HTTP protocol features.


index.html
----------

<center>
	<h1>
		<a  href="test"> getMsg </a>
	</h1>
</center>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>WishSrv</servlet-name>
  	<servlet-class>com.ihub.www.WishSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>WishSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  
</web-app>

WishSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WishSrv extends HttpServlet
{
	public void service(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		Calendar c=Calendar.getInstance();
		int h=c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			pw.println("<center><h1>Good Morning </h1></center>");
		else if(h<16)
			pw.println("<center><h1>Good Afternoon </h1></center>");
		else if(h<20)
			pw.println("<center><h1>Good Evening </h1></center>");
		else
			pw.println("<center><h1>Good Night</h1></center>");
		pw.close();
	}
}

Request url
---------
	http://localhost:8080/WishApp/


Example application on HTML based form page to Servlet communication
=====================================================================
Diagram: servlet3.2

Deployment Directory Structure
------------------------------
VoteApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java
|---WebContent 
	|
	|----form.html 
	|
	|----WEB-INF
		|	
		|----web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

We can send the request to servlet program in two methodologies.

1) GET methodology 
----------------
	It will carry limited amount of data.

2) POST methodology 
----------------
	It will carry unlimited amount of data.

While working with HttpServlet class , it is never recommanded to use service(-,-) method because it is not designed according to HTTP protocol.

It is always recommanded to use doXxx(-,-) methods because they have designed according to HTTP protocol.

We have seven doXxx(-,-) methods.

1) doGet(-,-)
2) doPost(-,-)
3) doPut(-,-)
4) doDelete(-,-)
5) doOption(-,-)
6) doTrace(-,-)
7) doHead(-,-)

prototype of doXxx(-,-)
-----------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws
							 ServletException,IOException
{
	
}


form.html
---------


<form action="test"  method="GET"> 

	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>

</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>VoteSrv</servlet-name>
  	<servlet-class>com.ihub.www.VoteSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>VoteSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

VoteSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		//convert string age to int 
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1 style='color:red'>"+name+" U r not eligible to vote </h1></center>");
		else
			pw.println("<center><h1 style='color:green'>"+name+" U r eligible to vote </h1></center>");	
	
		pw.close();
	}
}


Request url
--------
	http://localhost:8080/VoteApp/





























