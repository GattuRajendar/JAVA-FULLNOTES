Q) What is the difference between GET and POST methodology?

GET 						POST
-----------					--------
It is a default methodology.			It is not a default methodology.

It sends the request fastly.			It sends the request bit slow.

It will carry limited amount of data.		It will carry unlimited amount of data.

It is not suitable for secure data.		It is suitable for secure data.

It is not suitable for encryption and 		It is suitable for encryption and file uploading.
file uploading.

To process GET methodology we will use 		To process POST methodology we will use 
doGet(-,-) method.				doPost(-,-) method.




File Uploading
==============
The process of capturing a file from client machine file system and storing in a server machine file system is called file uploading and reverse is called file downloading.

While dealing with matrimonial applications, job portal applications, profile management applications we need to upload and download a file.

There is no specific API in servlet to perform file uploading.

Here we need to take the support of third party API called JAVAZOOM API.

JAVAZOOM API comes in zip format and once if we extracted then we will get three jar files.
ex:
	uploadbean.jar (main jar file)
	struts.jar     (dependent jar file)    
	cos.jar        (dependent jar file)  

We can place file component in a form page as follow.
ex:
	<input type="file" name="f1"/>


JAVAZOOM API Download link : 

https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=drive_link

Deployment Directory Structure
-----------------------------
UploadApp
|
|---Java Resources
|	|
	|-----src
		|	
		|---com.ihub.www
			|
			|---TestSrv.java
|
|---WebContent
	|
	|-----form.html
	|
	|-----WEB-INF
		|
		|-----web.xml 
		|
		|-------lib
			|
			|---uploadbean.jar
			|---struts.jar
			|---cos.jar

Note:
------
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

Copy and paste javazoom jar files inside "WEB-INF/lib" folder seperately.


form.html
----------

<form action="test" method="POST" enctype="multipart/form-data">
	
	File1: <input type="file" name="f1"/> <br>
	
	File2: <input type="file" name="f2"/> <br> 
	
	<input type="submit" value="upload"/>
	
</form>


web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 	<servlet>
 		<servlet-name>TestSrv</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv</servlet-name>
 		<url-pattern>/test</url-pattern>
 	</servlet-mapping>
 	
 	<welcome-file-list>
 		<welcome-file>form.html</welcome-file>
 	</welcome-file-list>
 
</web-app>


TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class TestSrv extends HttpServlet 
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//file uploading logic 
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\sudheer");
			ub.setOverwrite(false);
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center><h1> Files are uploaded successfully </h1></center>");
			
		}
		catch(Exception e)
		{
			pw.println(e);
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:8080/UploadApp/



Servlet Life Cycle Methods
==========================
We have three life cycle methods in servlets.

1)  public void init(ServletConfig config)throws ServletException 
-----------------------------------------------------------------
	It is used for instantiation event.
	This method will execute just before servlet object creation.


2)  public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
-----------------------------------------------------------------
	It is used for request arrival event.
	This method will execute when request goes to servlets.

3)  public void destroy() 
------------------------
	It is used for destruction event.
	This method will execute just before servlet object destruction.

Diagram: servlet5.1


Deployment Directory Structure
-----------------------------
LifeCycleApp
|
|---Java Resources
|	|
	|-----src
		|	
		|---com.ihub.www
			|
			|---TestSrv.java
|
|---WebContent
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|-----web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.


index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  	<servlet>
  		<servlet-name>TestSrv</servlet-name>
  		<servlet-class>com.ihub.www.TestSrv</servlet-class>
  	</servlet>
  	<servlet-mapping>
  		<servlet-name>TestSrv</servlet-name>
  		<url-pattern>/test</url-pattern>
  	</servlet-mapping>
  	
  	<welcome-file-list>
  		<welcome-file>index.html</welcome-file>
  	</welcome-file-list>
  
</web-app>


TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class TestSrv extends HttpServlet 
{
	public void init(ServletConfig config)throws ServletException
	{
		System.out.println("init-method");
	}
	
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		System.out.println("service-method");
		pw.println("<center><h1> This is service method </h1></center>");
		
		
	}
	
	public void destroy()
	{
		System.out.println("destroy-method");
	}
}

Request url
-----------
	http://localhost:8080/LifeCycleApp/



ServletConfig object
====================
A ServletConfig is an interface which is present in javax.servlet package.

A ServletConfig object is used to read configuration information from web.xml file.

A ServletConfig object created by web container for every servlet.

We can create ServletConfig object by using getServletConfig() method.

ex:
	ServletConfig config=getServletConfig();

A ServletConfig object contains following methods.


1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names.

3)public ServletContext getServletContext();
-------------------------------------------------------
	It will return ServletContext object.

4)public String getServletName();
-----------------------------------------------	
	It will return Servlet name.

Deployment Directory Structure
-----------------------------
ConfigApp
|
|---Java Resources
|	|
	|-----src
		|	
		|---com.ihub.www
			|
			|---TestSrv.java
|
|---WebContent
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|-----web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.


index.html
-----------
<center>
	<h1>
		<a href="test"> Click Here </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  	<servlet>
  		<servlet-name>TestSrv</servlet-name>
  		<servlet-class>com.ihub.www.TestSrv</servlet-class>
  		<init-param>
  			<param-name>driver</param-name>
  			<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  		</init-param>
  		<init-param>
  			<param-name>url</param-name>
  			<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  		</init-param>
  	</servlet>
  	
  	<servlet-mapping>
  		<servlet-name>TestSrv</servlet-name>
  		<url-pattern>/test</url-pattern>
  	</servlet-mapping>
  	
  	<welcome-file-list>
  		<welcome-file>index.html</welcome-file>
  	</welcome-file-list>
  	
  
</web-app>

TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletConfig config=getServletConfig();
		
		pw.println(config.getInitParameter("driver")+"<br>");
		pw.println(config.getInitParameter("url")+"<br>");
		
		
		Enumeration<String> e=config.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
		
		pw.println(config.getServletName()+"<br>");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:8080/ConfigApp/


















































