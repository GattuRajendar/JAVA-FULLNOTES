ServletContext object
=====================
ServletContext is an interface which is present in javax.servlet package.

ServletContext object is used to read configuration information from web.xml file which is global.

ServletContext object is created by the web container for every web application.

We can create ServletContext object as follow.

ex:
	ServletContext context=getServletContext(); 

	or 

	ServletConfig config=getServletConfig();
	ServletContext context=config.getServletContext();

We have following list of methods in ServletContext object.

1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names.

3)public void setAttribute(String name,Object obj);
---------------------------------------------------------
	It will set the attribute.

4)public Object getAttribute(String name);
----------------------------------------
	It will return the attribute  value.

5)public void removeAttribute(String name);
-----------------------------------------------------------
	It will remove the attribute.


Deployment Directory Structure
------------------------------
ContextApp
|
|---Java Resources
	|
	|------src
		|
		|---TestSrv.java
|
|---WebContent
	|
	|----index.html
	|
	|----WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.


index.html
-----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <context-param>
  	<param-name>driver</param-name>
  	<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  </context-param>
  
  <context-param>
  	<param-name>url</param-name>
  	<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  </context-param>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletContext context=getServletContext();
		
		pw.println(context.getInitParameter("driver")+"<br>");
		pw.println(context.getInitParameter("url")+"<br>");
		
		Enumeration<String> e=context.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
		
		context.setAttribute("name","Alan");
		context.setAttribute("age",30);
		
		pw.println(context.getAttribute("name")+"<br>");
		pw.println(context.getAttribute("age")+"<br>");
		
		context.removeAttribute("name");
		context.removeAttribute("age");
		
		
		pw.close();
	}
}


Request url
---------
	http://localhost:8080/ContextApp/




Servlet Filters
================
Filter is an object which is executed at the time of preprocessing and postprocessing of the request.

Diagram:  servlet6.1

Filter is used to perfor following task.

1) To count number of request coming to the application 

2) To perform form validation

3) To perform encryption and decryption

and etc.


Like Servlets, Filter is having it's own Filter API.

A javax.servlet package gave three interfaces of Filter API.

1) Filter 

2) FilterConfig 

3) FilterChain 

1)Filter Interface
================
For creating any filter, we must and should implements the Filter interface.

Filter interface provides the following 3 life cycle methods for filter.


i)public void init(FilterConfig config)
----------------------------------
	
	IT is used to initialize the filter.
	It invokes only once .


ii)public void doFilter(HttpServletRequest req,HttpServletResponse res,FilterChain chain)
----------------------------------------------------------
	This method is invoked every time when user request to any resources to which
	the filter is mappend.

	IT is used to perform filtering task.	
	
iii)public void destroy()
---------------------------
	This method is invoked only once when filter is taken out of the service.


2)FilterChain
==============
It is responsible to invoke the next filter or resource in the chain.

FilterChain contains only one method.

i)public void doFilter(HttpServletRequest req,HttpServletResponse res)
------------------------------------
	It passes the control to the next filter or resource.

	
3)FilterConfig
===============
For every filter our servlet container creates FilterConfig object.
It is one per filter.




Deployment Directory Structure
------------------------------
FilterApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---MyFilter.java
			|---MyServlet.java
|---Web Content
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|-----web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>MyServlet</servlet-name>
  	<servlet-class>com.ihub.www.MyServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MyServlet</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <filter>
  	<filter-name>MyFilter</filter-name>
  	<filter-class>com.ihub.www.MyFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>MyFilter</filter-name>
  	<url-pattern>/test</url-pattern>
  </filter-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>


MyFilter.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter
{
	@Override
	public void init(FilterConfig config)throws ServletException
	{
		
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException {
		
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1> Filter Invoked Before </h1></center><br>");
		
		chain.doFilter(req, res);
		
		pw.println("<center><h1> Filter Invoked After </h1></center><br>");
		
		
	}
	
	@Override
	public void destroy()
	{
		
	}

}

MyServlet.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1> Servlet Executed </h1></center><br>");
		
		
	}
}

Request url
-----------
	http://localhost:8080/FilterApp/test



























































































